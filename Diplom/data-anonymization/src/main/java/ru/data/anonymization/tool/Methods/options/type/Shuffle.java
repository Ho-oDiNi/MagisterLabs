package ru.data.anonymization.tool.Methods.options.type;

import java.sql.SQLException;
import lombok.Data;
import lombok.NoArgsConstructor;
import ru.data.anonymization.tool.Methods.options.MaskItem;
import ru.data.anonymization.tool.service.DatabaseConnectionService;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@Data
@NoArgsConstructor
public class Shuffle implements MaskItem {

    private String nameTable;
    private List<String> namesColumn;

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColumn() {
        return namesColumn;
    }

    private String convertListToString(List<String> strArr, String delimiter) {
        StringBuilder sb = new StringBuilder();
        for (String str : strArr) {
            sb.append(str).append(delimiter);
        }
        return sb.substring(0, sb.length() - 1);
    }

    @Override
    public void start(DatabaseConnectionService controllerDB) throws Exception {
        for (String columnsRow : namesColumn) {
            String newNameTable = "mixing_instructions_" + columnsRow;
            List<Integer> oldPosition = new ArrayList<>();
            List<Integer> newPosition = new ArrayList<>();

            controllerDB.execute("CREATE TABLE " + newNameTable
                                 + " (id SERIAL PRIMARY KEY,old_position INT,new_position INT);");
            controllerDB.execute("ALTER TABLE " + nameTable
                                 + " ADD COLUMN masking_id_for_shuffle INT GENERATED BY DEFAULT AS IDENTITY UNIQUE;");
            ResultSet resultSet = controllerDB.executeQuery(
                    "select count(*) from " + nameTable + ";");
            resultSet.next();
            int sizeTable = resultSet.getInt(1);
            resultSet = controllerDB.executeQuery(
                    "select " + columnsRow + ",masking_id_for_shuffle from " + nameTable + ";");

            shuffling(sizeTable, resultSet, oldPosition, newPosition);
            controllerDB.execute(
                    "ALTER TABLE " + nameTable + " DROP COLUMN masking_id_for_shuffle;");

            for (int j = 0; j < oldPosition.size(); j++) {
                controllerDB.execute(
                        "INSERT INTO " + newNameTable + " (old_position,new_position) values("
                        + oldPosition.get(j) + ", " + newPosition.get(j) + ");");
            }
        }

    }

    private void shuffling(
            int sizeTable,
            ResultSet resultSet,
            List<Integer> oldPosition,
            List<Integer> newPosition) throws SQLException {
        int cur;
        int lastEl = sizeTable;
        Object buf1, buf2;
        Random random = new Random();
        for (int i = 1; i < sizeTable; i++) {
            cur = random.nextInt(lastEl - 1) + 1;
            System.out.println(cur);
            for (int j = 1; j < namesColumn.size() + 1; j++) {
                resultSet.absolute(cur);
                buf1 = resultSet.getObject(j);

                resultSet.absolute(lastEl);
                buf2 = resultSet.getObject(j);

                resultSet.updateObject(j, buf1);
                resultSet.updateRow();

                resultSet.absolute(cur);
                resultSet.updateObject(j, buf2);
                resultSet.updateRow();

                oldPosition.add(cur);
                newPosition.add(lastEl);
            }

            lastEl--;
        }
    }

}
