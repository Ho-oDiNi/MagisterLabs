package ru.data.anonymization.tool.Methods.options.type;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import ru.data.anonymization.tool.Methods.controllers.ControllerDB;
import ru.data.anonymization.tool.Methods.options.MaskItem;
import ru.data.anonymization.tool.service.DatabaseConnectionService;

import java.io.Serializable;
import java.sql.ResultSet;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Decomposition implements MaskItem {
    private String nameTable;
    private List<String> nameColumns;
    private String nameNewTable;
    private ControllerDB controllerOfDatabaseToTransfer;

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColumn() {
        return nameColumns;
    }

    @Override
    public void start(DatabaseConnectionService controllerDB) throws Exception {
        String tempId = "temp_id_by_decomposition";

        String columnsRow = convertStringArrayToString(nameColumns);
        controllerDB.execute("ALTER TABLE "+nameTable+" ADD COLUMN "+tempId+" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;");

        controllerDB.execute("ALTER TABLE "+nameTable+" ADD COLUMN id_"+nameNewTable+" INT DEFAULT 0;");

        StringBuilder getColumns = new StringBuilder("( column_name = '" + nameColumns.get(0) + "'");
        for (int i = 1; i < nameColumns.size(); i++) {
            getColumns.append(" or column_name = '").append(nameColumns.get(i)).append("'");
        }
        getColumns.append(")");

        ResultSet result = controllerDB.executeQuery("SELECT data_type FROM information_schema.columns WHERE "+getColumns+" AND table_name = '"+nameTable+"';");
        result.next();

        String typeColumn = result.getString(1);
        String getTypes = nameColumns.get(0) +" "+typeColumn;

        for (int i = 1; i < nameColumns.size(); i++) {
            result.next();
            typeColumn = result.getString(1);
            getTypes += ", "+nameColumns.get(i) +" "+typeColumn;
        }

        result = controllerDB.executeQuery("SELECT "+columnsRow+", id_"+nameNewTable+", "+tempId+" FROM "+nameTable+" ORDER BY RANDOM();");
        controllerOfDatabaseToTransfer.connect();
        controllerOfDatabaseToTransfer.getStatement().execute("DROP TABLE IF EXISTS "+nameNewTable+";");
        controllerOfDatabaseToTransfer.getStatement().execute("CREATE TABLE "+nameNewTable+"(id SERIAL PRIMARY KEY, "+getTypes+");");
        int id = 1;

        String insertRow;
        while(result.next()){
            insertRow = "'"+result.getString(1)+"'";
            for (int i = 2; i < nameColumns.size()+1; i++) {
                insertRow += ",'"+result.getString(i)+"'";
            }

            controllerOfDatabaseToTransfer.getStatement().execute(
                    "INSERT INTO "+nameNewTable+" ("+columnsRow+") values("+insertRow+");"
            );
            result.updateInt(nameColumns.size()+1, id++);
            result.updateRow();
        }
        controllerOfDatabaseToTransfer.disconnect();

        controllerDB.execute("ALTER TABLE "+nameTable+" DROP COLUMN "+tempId+";");

        for (String nameColumn : nameColumns) {
            controllerDB.execute("ALTER TABLE " + nameTable + " DROP COLUMN " + nameColumn + ";");
        }
    }

    private String convertStringArrayToString(List<String> strArr) {
        StringBuilder sb = new StringBuilder();
        for (String str : strArr)
            sb.append(str).append(",");
        return sb.substring(0, sb.length() - 1);
    }
}
