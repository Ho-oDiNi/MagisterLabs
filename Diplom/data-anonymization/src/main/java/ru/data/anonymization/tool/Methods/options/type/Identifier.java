package ru.data.anonymization.tool.Methods.options.type;

import lombok.Data;
import lombok.NoArgsConstructor;
import ru.data.anonymization.tool.Methods.options.MaskItem;
import ru.data.anonymization.tool.service.DatabaseConnectionService;

import java.io.Serializable;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Data
@NoArgsConstructor
public class Identifier implements MaskItem {
    private String nameTable;
    private List<String> namesColumn;
    private String newNameTable;

    @Override
    public String getTable() {
        return nameTable;
    }

    @Override
    public List<String> getColumn() {
        return namesColumn;
    }

    private String convertStringArrayToString(List<String> strArr, String idTable) {
        StringBuilder sb = new StringBuilder();
        for (String str : strArr)
            sb.append(str).append(",");
        return sb.append(idTable).substring(0, sb.length());
    }

    @Override
    public void start(DatabaseConnectionService controllerDB) throws Exception {
        String nameTempIdField = "temp_id_by_identifier";
        int length;

        controllerDB.execute("ALTER TABLE " + nameTable + " ADD COLUMN " + nameTempIdField + " INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;");
        controllerDB.execute("ALTER TABLE " + nameTable + " ADD COLUMN id_" + newNameTable + " TEXT;");

        ResultSet result = controllerDB.executeQuery("select length(" + namesColumn.get(0) + "::text) from " + nameTable + " order by length(" + namesColumn.get(0) + "::text) desc limit 1;");
        result.next();
        length = result.getInt(1);

        result = controllerDB.executeQuery("SELECT " + nameTempIdField + ", id_" + newNameTable + ", " + nameTempIdField + " FROM " + nameTable + ";");

        try {
            final MessageDigest digest = MessageDigest.getInstance("SHA3-256");
            String hashString, sha3Hex;
            byte[] hashbytes;
            while (result.next()) {
                hashString = length + result.getString(1);
                hashbytes = digest.digest(hashString.getBytes(StandardCharsets.UTF_8));
                sha3Hex = bytesToHex(hashbytes);
                result.updateString(2, sha3Hex);
                result.updateRow();
            }
        } catch (Exception e) {
            return;
        }

        String columnsRow = convertStringArrayToString(namesColumn, "id_" + newNameTable);
        controllerDB.execute("CREATE TABLE " + newNameTable + " AS (SELECT " + columnsRow + " FROM " + nameTable + ");");
        namesColumn.forEach(column -> {
            try {
                controllerDB.execute(
                        "ALTER TABLE " + nameTable + " DROP COLUMN " + column + ";"
                );
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });

        controllerDB.execute("ALTER TABLE " + nameTable + " DROP COLUMN " + nameTempIdField + ";");
    }

    private String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder(2 * hash.length);
        for (byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
