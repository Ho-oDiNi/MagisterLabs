plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Получение предсказанных значений, соответствующих исходным данным
fitted_values <- fitted(model2)
# Построение гладкой линии для отображения модели
lines(tsData$time, fitted_values, col="blue", lwd=2)
# Построение исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Получение предсказанных значений, соответствующих исходным данным
fitted_values <- fitted(model2)
# Построение гладкой линии для отображения модели
lines(tsData$time, fitted_values, col="blue")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
# Построение исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Создание дополнительной временной последовательности
t_interp <- seq(min(data1$t), max(data1$t), length.out = 1000)
# Предсказание модели на дополнительных точках
fitted_values_interp <- predict(model2, newdata = data.frame(t = t_interp))
# Построение гладкой линии для интерполированных значений
lines(t_interp, fitted_values_interp, col="blue", lwd=2)
# Построение исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Получение предсказанных значений, соответствующих исходным данным
fitted_values <- fitted(model2)
# Построение гладкой линии для отображения модели
lines(tsData$time, fitted_values, col="blue", lwd=2)
# Построение исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Получение предсказанных значений, соответствующих модели
fitted_values <- fitted(model2)
# Построение линии для предсказанных значений (без использования tsData$time)
lines(fitted_values, col="blue", lwd=2)
# Построение исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время")
# Создание дополнительной временной последовательности
t_interp <- seq(1, length(tsData), length.out = 1000)  # Индексы для интерполяции
# Предсказание модели на дополнительных точках
fitted_values_interp <- predict(model2, newdata = data.frame(t = t_interp))
# Построение гладкой линии для интерполированных значений
lines(t_interp, fitted_values_interp, col="blue", lwd=2)
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
# График исходного временного ряда
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)", ylab="Значения", xlab="Время", type="l")
# Создаем последовательность временных точек для плавной линии
t_interp <- seq(min(data1$t), max(data1$t), length.out = 1000)
# Получаем предсказания модели 2 для интерполированных временных точек
fitted_values_interp <- predict(model2, newdata = data.frame(t = t_interp))
# Добавляем предсказанные значения как плавную линию на график
lines(t_interp, fitted_values_interp, col="blue", lwd=2)
# График исходного ряда с наложением тренда
plot(t, y, main="Исходный ряд с трендовой моделью (Модель 1)")
lines(t, predict(model1), col="red")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
data1 <- data.frame(t = 1:length(tsData), y = tsData)
# Обновленная модель с проверкой начальных значений
model2 <- nls(y ~ a0 + a1 * t + a2 * t^2 +
c0 * sin(2 * pi * t / 12) + b0 * cos(2 * pi * t / 12) +
c1 * sin(2 * pi * t / 6) + b1 * cos(2 * pi * t / 6),
data = data1,
start = list(a0 = 1, a1 = 0.5, a2 = 0.1, c0 = 0.5, b0 = 0.5, c1 = 0.3, b1 = 0.3))
# Сводка по модели
summary_model2 <- summary(model2)
# Вывод метрик ошибки
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / tsData)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / tsData)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
r_squared <- 1 - sum(residuals(model2)^2) / sum((tsData - mean(tsData))^2)
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
cat("Коэффициент детерминации (R-squared):", r_squared, "\n")
# Оценка точности модели 2
library(forecast)
accuracy_model2 <- accuracy(fitted(model2), tsData)
print("Точность Модели 2:")
print(accuracy_model2)
# График исходного ряда с наложением тренда и сезонной составляющей
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
# Остатки модели 2 и их анализ
residuals_model2 <- residuals(model2)
plot(residuals_model2, main="Остатки Модели 2")
Acf(residuals_model2, main="ACF остатков Модели 2")
Pacf(residuals_model2, main="PACF остатков Модели 2")
spec.pgram(residuals_model2, detrend=FALSE, log="no", main="Периодограмма остатков Модели 2")
# График исходного ряда с наложением тренда и сезонной составляющей
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
# Обновленная модель с проверкой начальных значений
model2 <- nls(y ~ a0 + a1 * t + a2 * t^2 +
c0 * sin(2 * pi * t / 12) + b0 * cos(2 * pi * t / 12) +
c1 * sin(2 * pi * t / 6) + b1 * cos(2 * pi * t / 6),
data = data1,
start = list(a0 = 1, a1 = 0.5, a2 = 0.1, c0 = 0.5, b0 = 0.5, c1 = 0.3, b1 = 0.3))
# Сводка по модели
summary_model2 <- summary(model2)
# Вывод метрик ошибки
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / tsData)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / tsData)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
r_squared <- 1 - sum(residuals(model2)^2) / sum((tsData - mean(tsData))^2)
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
cat("Коэффициент детерминации (R-squared):", r_squared, "\n")
# Оценка точности модели 2
library(forecast)
accuracy_model2 <- accuracy(fitted(model2), tsData)
print("Точность Модели 2:")
print(accuracy_model2)
# График исходного ряда с наложением тренда и сезонной составляющей
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
# Остатки модели 2 и их анализ
residuals_model2 <- residuals(model2)
plot(residuals_model2, main="Остатки Модели 2")
Acf(residuals_model2, main="ACF остатков Модели 2")
Pacf(residuals_model2, main="PACF остатков Модели 2")
spec.pgram(residuals_model2, detrend=FALSE, log="no", main="Периодограмма остатков Модели 2")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
plot(fitted(model2), type = 'l')
print(summary_model2)
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(t,fitted(model2), col="blue")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
t <- 1:length(tsData)
lines(t,fitted(model2), col="blue")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
t <- 1:length(tsData)
lines(t,fitted(model2), col="blue")
lines(10,fitted(model2), col="blue")
t <- 1:length(tsData)
print(t)
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(t,fitted(model2), col="blue")
plot(tsData, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model1), col="blue")
plot(t, y, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
plot(t, y, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(fitted(model2), col="blue")
plot(t, y, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(t,fitted(model2), col="blue")
# Загрузка библиотек
library(forecast)
library(tseries)
# Загрузка данных
data <- read.csv("data.csv", header=TRUE, sep=";", check.names=F, fileEncoding="Windows-1251")
tsData <- ts(data[15], frequency=12) # Загрузка 12 варианта временного ряда
# 2.2 Построение графика временного ряда и его декомпозиция
plot.ts(tsData, main="Временной ряд")
decomp <- decompose(tsData)
plot(decomp)
# Построение автокорреляционной и частной автокорреляционной функций
Acf(tsData, main="ACF Временного ряда")
Pacf(tsData, main="PACF Временного ряда")
# 2.3.1 Идентификация тренда (Модель 1)
# Используем линейную модель тренда
t <- 1:length(tsData)
y <- as.numeric(tsData)
data1 <- data.frame(y=y, t=t)
model1 <- nls(y ~ a0+a1*t+a2*t^2, data=data1, start = c(a0=1,a1=1,a2=1)) # Линейная регрессия
summary_model1 <- summary(model1)
# Оценка точности модели
accuracy_model1 <- accuracy(fitted(model1), tsData)
print("Точность Модели 1:")
print(accuracy_model1)
min_error <- min(residuals(model1))
max_error <- max(residuals(model1))
mean_error <- mean(residuals(model1))
std_dev <- sd(residuals(model1))
mean_absolute_error <- mean(abs(residuals(model1)))
mean_percentage_error <- mean(100 * residuals(model1) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model1)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model1)^2))
r_squared <- summary_model1$r.squared
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
cat("Коэффициент детерминации (R-squared):", r_squared, "\n")
# График исходного ряда с наложением тренда
plot(t, y, main="Исходный ряд с трендовой моделью (Модель 1)")
lines(t, predict(model1), col="red")
# Остатки Модели 1 и их анализ
residuals_model1 <- residuals(model1)
plot(residuals_model1, main="Остатки Модели 1")
Acf(residuals_model1, main="ACF остатков Модели 1")
Pacf(residuals_model1, main="PACF остатков Модели 1")
residuals_model12 <- ts(residuals_model1, frequency = 12)
spec.pgram(residuals_model12, detrend=FALSE, log="no", main="Периодограмма остатков Модели 1")
# 2.3.2 Идентификация сезонной составляющей (Модель 2)
# Добавляем сезонную составляющую
# model2 <- tslm(tsData ~ trend + season)
model2 <- nls(y ~ a0+a1*t+a2*t^2 + c0*sin(2*pi*t/12) + b0*cos(2*pi*t/12)
+ c1* sin(2*pi*t/6) + b1*cos(2*pi*t/6),
data=data1, start = c(a0=1,a1=1,a2=1,c0=1,b0=1,c1=1,b1=1))
summary_model2 <- summary(model2)
#plot(fitted(model2), type = 'l')
#print(summary_model2)
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
r_squared <- summary_model2$r.squared
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
cat("Коэффициент детерминации (R-squared):", r_squared, "\n")
# Оценка точности модели 2
accuracy_model2 <- accuracy(fitted(model2), tsData)
print("Точность Модели 2:")
print(accuracy_model2)
# График исходного ряда с наложением тренда и сезонной составляющей
plot(t, y, main="Исходный ряд с трендовой и сезонной моделью (Модель 2)")
lines(t,fitted(model2), col="blue")
# Остатки Модели 2 и их анализ
residuals_model2 <- residuals(model2)
plot(residuals_model2, main="Остатки Модели 2")
Acf(residuals_model2, main="ACF остатков Модели 2")
Pacf(residuals_model2, main="PACF остатков Модели 2")
spec.pgram(residuals_model2, detrend=FALSE, log="no", main="Периодограмма остатков Модели 2")
# Загрузка библиотек
library(forecast)
library(tseries)
# Загрузка данных
data <- read.csv("data.csv", header=TRUE, sep=";", check.names=F, fileEncoding="Windows-1251")
tsData <- ts(data[15], frequency=12) # Загрузка 12 варианта временного ряда
View(tsData)
# 2.2 Построение графика временного ряда и его декомпозиция
plot.ts(tsData, main="Временной ряд")
decomp <- decompose(tsData)
plot(decomp)
# Построение автокорреляционной и частной автокорреляционной функций
Acf(tsData, main="ACF Временного ряда")
Pacf(tsData, main="PACF Временного ряда")
# 2.3.1 Идентификация тренда (Модель 1)
# Используем линейную модель тренда
t <- 1:length(tsData)
y <- as.numeric(tsData)
data1 <- data.frame(y=y, t=t)
model1 <- nls(y ~ a0+a1*t+a2*t^2, data=data1, start = c(a0=1,a1=1,a2=1))
summary_model1 <- summary(model1)
# Оценка точности модели
accuracy_model1 <- accuracy(fitted(model1), tsData)
print("Точность Модели 1:")
print(accuracy_model1)
min_error <- min(residuals(model1))
max_error <- max(residuals(model1))
mean_error <- mean(residuals(model1))
std_dev <- sd(residuals(model1))
mean_absolute_error <- mean(abs(residuals(model1)))
mean_percentage_error <- mean(100 * residuals(model1) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model1)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model1)^2))
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
# График исходного ряда с наложением тренда
plot(t, y, main="Исходный ряд с трендовой моделью (Модель 1)")
lines(t, predict(model1), col="red")
# Остатки Модели 1 и их анализ
residuals_model1 <- residuals(model1)
plot(residuals_model1, main="Остатки Модели 1")
Acf(residuals_model1, main="ACF остатков Модели 1")
Pacf(residuals_model1, main="PACF остатков Модели 1")
residuals_model12 <- ts(residuals_model1, frequency = 12)
spec.pgram(residuals_model12, detrend=FALSE, log="no", main="Периодограмма остатков Модели 1")
# 2.3.2 Идентификация сезонной составляющей (Модель 2)
# Добавляем сезонную составляющую
# model2 <- tslm(tsData ~ trend + season)
model2 <- nls(y ~ a0+a1*t+a2*t^2 + c0*sin(2*pi*t/12) + b0*cos(2*pi*t/12)
+ c1* sin(2*pi*t/6) + b1*cos(2*pi*t/6),
data=data1, start = c(a0=1,a1=1,a2=1,c0=1,b0=1,c1=1,b1=1))
summary_model2 <- summary(model2)
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
# Оценка точности модели 2
accuracy_model2 <- accuracy(fitted(model2), tsData)
print("Точность Модели 2:")
print(accuracy_model2)
# График исходного ряда с наложением тренда и сезонной составляющей
plot(data$`вар 12`, type = 'l')
lines(fitted(model2), col='blue')
# Остатки Модели 2 и их анализ
residuals_model2 <- residuals(model2)
plot(residuals_model2, main="Остатки Модели 2")
Acf(residuals_model2, main="ACF остатков Модели 2")
Pacf(residuals_model2, main="PACF остатков Модели 2")
spec.pgram(residuals_model2, detrend=FALSE, log="no", main="Периодограмма остатков Модели 2")
# 2.4 Сравнение моделей и прогноз на 3 шага вперед на основе Модели 2
print("Сравнение точности моделей:")
print(accuracy_model1)
print(accuracy_model2)
# 2.4 Сравнение моделей и прогноз на 3 шага вперед на основе Модели 2
print("Сравнение точности моделей:")
print(accuracy_model1)
print(accuracy_model2)
# Прогноз на 3 шага вперед на основе модели 2
forecast_model2 <- forecast(model2, h=3)
# Прогноз на 3 шага вперед на основе модели 2
forecast_model2 <- forecast(model2, h=3)
predict1 <- predict(model2,newdata = data.frame(t = c(193,194,195)))
fullpredicted1 <- c(fitted(model2), predict1)
plot(data$`вар 12`, type = 'l')
lines(fullpredicted1, col='blue')
lines(fitted(model2), col='red')
# 2.3.1 Идентификация тренда (Модель 1)
# Используем линейную модель тренда
t <- 1:length(tsData)
y <- as.numeric(tsData)
data1 <- data.frame(y=y, t=t)
model1 <- nls(y ~ a0+a1*t+a2*t^2, data=data1, start = c(a0=1,a1=1,a2=1))
summary_model1 <- summary(model1)
# Оценка точности модели
accuracy_model1 <- accuracy(fitted(model1), tsData)
print("Точность Модели 1:")
print(accuracy_model1)
min_error <- min(residuals(model1))
max_error <- max(residuals(model1))
mean_error <- mean(residuals(model1))
std_dev <- sd(residuals(model1))
mean_absolute_error <- mean(abs(residuals(model1)))
mean_percentage_error <- mean(100 * residuals(model1) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model1)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model1)^2))
calc_stat <- function(x,y)
{
Mean <- mean(x)
n <- length(x)
Min <- min(x)
Max <- max(x)
SD <- sd(x)
MAE <- mean(abs(x))
MPE <- mean(100*x/y)
MAPE <- mean(abs(100*x/y))
RMSE <- sqrt(mean(x^2))
DC1 <- 1 -(sum(x^2)/sum((y - mean(y))^2))
return (c(Mean=Mean,n=n,Min=Min,Max=Max,SD=SD,MAE=MAE,MPE=MPE,MAPE=MAPE,RMSE=RMSE,DC1=DC1))
}
calc_stat(residuals(model1), y)
# Оценка точности модели
accuracy_model1 <- accuracy(fitted(model1), tsData)
print("Точность Модели 1:")
print(accuracy_model1)
min_error <- min(residuals(model1))
max_error <- max(residuals(model1))
mean_error <- mean(residuals(model1))
std_dev <- sd(residuals(model1))
mean_absolute_error <- mean(abs(residuals(model1)))
mean_percentage_error <- mean(100 * residuals(model1) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model1)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model1)^2))
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
# 2.3.2 Идентификация сезонной составляющей (Модель 2)
# Добавляем сезонную составляющую
# model2 <- tslm(tsData ~ trend + season)
model2 <- nls(y ~ a0+a1*t+a2*t^2 + c0*sin(2*pi*t/12) + b0*cos(2*pi*t/12)
+ c1* sin(2*pi*t/6) + b1*cos(2*pi*t/6),
data=data1, start = c(a0=1,a1=1,a2=1,c0=1,b0=1,c1=1,b1=1))
summary_model2 <- summary(model2)
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
# Оценка точности модели 2
accuracy_model2 <- accuracy(fitted(model2), tsData)
print("Точность Модели 2:")
print(accuracy_model2)
calc_stat(residuals(model2),y)
# 2.3.2 Идентификация сезонной составляющей (Модель 2)
# Добавляем сезонную составляющую
# model2 <- tslm(tsData ~ trend + season)
model2 <- nls(y ~ a0+a1*t+a2*t^2 + c0*sin(2*pi*t/12) + b0*cos(2*pi*t/12)
+ c1* sin(2*pi*t/6) + b1*cos(2*pi*t/6),
data=data1, start = c(a0=1,a1=1,a2=1,c0=1,b0=1,c1=1,b1=1))
summary_model2 <- summary(model2)
min_error <- min(residuals(model2))
max_error <- max(residuals(model2))
mean_error <- mean(residuals(model2))
std_dev <- sd(residuals(model2))
mean_absolute_error <- mean(abs(residuals(model2)))
mean_percentage_error <- mean(100 * residuals(model2) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model2)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model2)^2))
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
# Оценка точности модели
accuracy_model1 <- accuracy(fitted(model1), tsData)
print("Точность Модели 1:")
print(accuracy_model1)
min_error <- min(residuals(model1))
max_error <- max(residuals(model1))
mean_error <- mean(residuals(model1))
std_dev <- sd(residuals(model1))
mean_absolute_error <- mean(abs(residuals(model1)))
mean_percentage_error <- mean(100 * residuals(model1) / y)
mean_absolute_percentage_error <- mean(100 * abs(residuals(model1)) / y)
root_mean_squared_error <- sqrt(mean(residuals(model1)^2))
# Вывод значений для таблицы
cat("Минимальный остаток (Min error):", min_error, "\n")
cat("Максимальный остаток (Max error):", max_error, "\n")
cat("Средняя ошибка (Mean error):", mean_error, "\n")
cat("СКО ошибки (Std. dev.):", std_dev, "\n")
cat("Средняя абсолютная ошибка (Mean absolute error):", mean_absolute_error, "\n")
cat("Средняя ошибка в процентах (Mean percentage error):", mean_percentage_error, "\n")
cat("Средняя абсолютная ошибка в процентах (Mean absolute percentage error):", mean_absolute_percentage_error, "\n")
cat("Средний квадрат ошибки (Root mean squared error):", root_mean_squared_error, "\n")
predict1 <- predict(model2,newdata = data.frame(t = c(193,194,195)))
fullpredicted1 <- c(fitted(model2), predict1)
plot(data$`вар 12`, type = 'l')
lines(fullpredicted1, col='blue')
lines(fitted(model2), col='red')
